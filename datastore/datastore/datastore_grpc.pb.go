// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: protobuf/datastore.proto

package datastore

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatastoreClient is the client API for Datastore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatastoreClient interface {
	// insert observations into the storage (or update existing ones)
	PutObservations(ctx context.Context, in *PutObsRequest, opts ...grpc.CallOption) (*PutObsResponse, error)
	// retrieve observations from the storage
	GetObservations(ctx context.Context, in *GetObsRequest, opts ...grpc.CallOption) (*GetObsResponse, error)
	// get unique combinations of a set of time series attributes
	GetTSAttrGroups(ctx context.Context, in *GetTSAGRequest, opts ...grpc.CallOption) (*GetTSAGResponse, error)
	// get temporal and spatial extents of current storage contents
	GetExtents(ctx context.Context, in *GetExtentsRequest, opts ...grpc.CallOption) (*GetExtentsResponse, error)
}

type datastoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDatastoreClient(cc grpc.ClientConnInterface) DatastoreClient {
	return &datastoreClient{cc}
}

func (c *datastoreClient) PutObservations(ctx context.Context, in *PutObsRequest, opts ...grpc.CallOption) (*PutObsResponse, error) {
	out := new(PutObsResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/PutObservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetObservations(ctx context.Context, in *GetObsRequest, opts ...grpc.CallOption) (*GetObsResponse, error) {
	out := new(GetObsResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetObservations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetTSAttrGroups(ctx context.Context, in *GetTSAGRequest, opts ...grpc.CallOption) (*GetTSAGResponse, error) {
	out := new(GetTSAGResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetTSAttrGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datastoreClient) GetExtents(ctx context.Context, in *GetExtentsRequest, opts ...grpc.CallOption) (*GetExtentsResponse, error) {
	out := new(GetExtentsResponse)
	err := c.cc.Invoke(ctx, "/datastore.Datastore/GetExtents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatastoreServer is the server API for Datastore service.
// All implementations must embed UnimplementedDatastoreServer
// for forward compatibility
type DatastoreServer interface {
	// insert observations into the storage (or update existing ones)
	PutObservations(context.Context, *PutObsRequest) (*PutObsResponse, error)
	// retrieve observations from the storage
	GetObservations(context.Context, *GetObsRequest) (*GetObsResponse, error)
	// get unique combinations of a set of time series attributes
	GetTSAttrGroups(context.Context, *GetTSAGRequest) (*GetTSAGResponse, error)
	// get temporal and spatial extents of current storage contents
	GetExtents(context.Context, *GetExtentsRequest) (*GetExtentsResponse, error)
	mustEmbedUnimplementedDatastoreServer()
}

// UnimplementedDatastoreServer must be embedded to have forward compatible implementations.
type UnimplementedDatastoreServer struct {
}

func (UnimplementedDatastoreServer) PutObservations(context.Context, *PutObsRequest) (*PutObsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutObservations not implemented")
}
func (UnimplementedDatastoreServer) GetObservations(context.Context, *GetObsRequest) (*GetObsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetObservations not implemented")
}
func (UnimplementedDatastoreServer) GetTSAttrGroups(context.Context, *GetTSAGRequest) (*GetTSAGResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTSAttrGroups not implemented")
}
func (UnimplementedDatastoreServer) GetExtents(context.Context, *GetExtentsRequest) (*GetExtentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExtents not implemented")
}
func (UnimplementedDatastoreServer) mustEmbedUnimplementedDatastoreServer() {}

// UnsafeDatastoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatastoreServer will
// result in compilation errors.
type UnsafeDatastoreServer interface {
	mustEmbedUnimplementedDatastoreServer()
}

func RegisterDatastoreServer(s grpc.ServiceRegistrar, srv DatastoreServer) {
	s.RegisterService(&Datastore_ServiceDesc, srv)
}

func _Datastore_PutObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutObsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).PutObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/PutObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).PutObservations(ctx, req.(*PutObsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetObservations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetObsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetObservations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetObservations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetObservations(ctx, req.(*GetObsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetTSAttrGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTSAGRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetTSAttrGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetTSAttrGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetTSAttrGroups(ctx, req.(*GetTSAGRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Datastore_GetExtents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExtentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatastoreServer).GetExtents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/datastore.Datastore/GetExtents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatastoreServer).GetExtents(ctx, req.(*GetExtentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Datastore_ServiceDesc is the grpc.ServiceDesc for Datastore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Datastore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "datastore.Datastore",
	HandlerType: (*DatastoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutObservations",
			Handler:    _Datastore_PutObservations_Handler,
		},
		{
			MethodName: "GetObservations",
			Handler:    _Datastore_GetObservations_Handler,
		},
		{
			MethodName: "GetTSAttrGroups",
			Handler:    _Datastore_GetTSAttrGroups_Handler,
		},
		{
			MethodName: "GetExtents",
			Handler:    _Datastore_GetExtents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/datastore.proto",
}
